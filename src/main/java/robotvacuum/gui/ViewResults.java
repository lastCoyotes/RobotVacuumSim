package robotvacuum.gui;

import robotvacuum.simulation.Simulator;
import robotvacuum.house.HouseManager;
import robotvacuum.robot.*;

/**
 *
 * @author Tristan Bolern Boler  
 */
public class ViewResults extends javax.swing.JDialog {

    /**
     * Creates new form viewResults
     */
    public ViewResults(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathingAlgorithmText = new javax.swing.JLabel();
        batteryLifeText = new javax.swing.JLabel();
        vacuumEfficiencyText = new javax.swing.JLabel();
        whiskerEfficiencyText = new javax.swing.JLabel();
        vacuumSpeedText = new javax.swing.JLabel();
        percentCleanedText = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        remainingBatteryText = new javax.swing.JLabel();
        totalRuntimeText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Results");

        pathingAlgorithmText.setText("Pathing Algorithm: ");

        batteryLifeText.setText("Max Battery Life: ");

        vacuumEfficiencyText.setText("Vacuum Efficiency: ");

        whiskerEfficiencyText.setText("Whisker Efficiency:");

        vacuumSpeedText.setText("Vacuum Speed:");

        percentCleanedText.setText("Percent Cleaned: ");

        closeButton.setText("Close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        remainingBatteryText.setText("Remaining Battery: ");

        totalRuntimeText.setText("Total Runtime: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathingAlgorithmText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(batteryLifeText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vacuumEfficiencyText, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(whiskerEfficiencyText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vacuumSpeedText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(percentCleanedText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(remainingBatteryText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalRuntimeText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pathingAlgorithmText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(batteryLifeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vacuumEfficiencyText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(whiskerEfficiencyText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vacuumSpeedText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(percentCleanedText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(remainingBatteryText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalRuntimeText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonMouseClicked

    public void loadInResults(Simulator s, HouseGUI gui) {
        HouseManager h = new HouseManager();
        h.setHouse(s.getHouse());
        batteryLifeText.setText("Max Battery Life: " + s.getVacuum().getProperties().getMaxBatteryLife() + " min");
        vacuumEfficiencyText.setText("Vacuum Efficiency: " + 
                (int)(s.getVacuum().getProperties().getVacuumEfficiency().get(h.getHouse().getFloorCovering())*100) + "%");
        whiskerEfficiencyText.setText("Whisker Efficiency: " + 
                (int)(s.getVacuum().getProperties().getWhiskersEfficiency().get(h.getHouse().getFloorCovering())*100) + "%");
        vacuumSpeedText.setText("Vacuum Speed: " + (int)(s.getVacuum().getProperties().getSpeed()*100) + " cm/s");
        percentCleanedText.setText("Percent Cleaned: " + (int)s.getCleanPercent() + "%");
        remainingBatteryText.setText("Remaining Battery: " + (int)(s.getVacuum().getrSimState().getRemainingBattery()) + " min");
        totalRuntimeText.setText("Total Runtime: " + (s.getVacuum().getProperties().getMaxBatteryLife() - (int)(s.getVacuum().getrSimState().getRemainingBattery())) + " min");
        VacuumStrategy v = s.getVacuum().getVacuumStrategy();
        if (v instanceof RandomVacuumStrategy) {
            pathingAlgorithmText.setText("Pathing Algorithm: Random");
        }
        else if (v instanceof SnakeVacuumStrategy) {
            pathingAlgorithmText.setText("Pathing Algorithm: Snake");
        }
        //other strategies when they're added
        
        gui.redoVacuum(null);
        gui.redoAll(h.getWalls(), h.getChests(), h.getTableLegs(),
                h.getFloorCode(), (int) h.getHouseWidth(), (int) h.getHouseHeight());
        gui.paintCleanSpots(s.getCleanSpots());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewResults dialog = new ViewResults(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel batteryLifeText;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel pathingAlgorithmText;
    private javax.swing.JLabel percentCleanedText;
    private javax.swing.JLabel remainingBatteryText;
    private javax.swing.JLabel totalRuntimeText;
    private javax.swing.JLabel vacuumEfficiencyText;
    private javax.swing.JLabel vacuumSpeedText;
    private javax.swing.JLabel whiskerEfficiencyText;
    // End of variables declaration//GEN-END:variables
}
